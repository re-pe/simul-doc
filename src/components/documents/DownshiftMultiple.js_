import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import keycode from 'keycode';
import Downshift from 'downshift';
import { Paper, Chip } from '@material-ui/core';
import SuggestionList from './SuggestionList';
import AuthorField from './AuthorField';
import { modifyDocument } from '../../js/actions/document-actions';

const mapStateToProps = state => ({
  selectedDocument: state.documentReducer.selectedDocument,
  userList: state.userReducer.userList,
});

const mapDispatchToProps = dispatch => ({
  modifyDocument: (id, data) => dispatch(modifyDocument(id, data)),
});

const filterDataBySetProperty = (data, set, property) =>
  data.filter(item => set.indexOf(item[property]) > -1);

const filterDataBySetProperty = (data, set, property) =>
data.filter(item => set.indexOf(item[property]) > -1);

  const filterDataByProperty = (data, property) =>
  data.map(item => (item[property]));

class DownshiftMultiple extends Component {
  constructor(props) {
    super(props);
    // this.state.selectedItem =
    // this.filterDataByProperty(this.props.selectedDocument.authors, '_id');
    this.handleChange = this.handleChange.bind(this);
    this.handleDelete = this.handleDelete.bind(this);
  }

  state = {
    inputValue: '',
    selectedItem: [],
  };

  componentWillMount = () => {
    this.setState({
      selectedItem:
        filterDataByProperty(this.props.selectedDocument.authors, '_id'),
    });
  }

  handleKeyDown = (event) => {
    const { inputValue, selectedItem } = this.state;
    if (selectedItem.length && !inputValue.length && keycode(event) === 'backspace') {
      this.setState({
        selectedItem: selectedItem.slice(0, selectedItem.length - 1),
      });
    }
  };

  handleInputChange = (event) => {
    this.setState({ inputValue: event.target.value });
  };

  handleChange = (item) => {
    let { selectedItem } = this.state;

    if (selectedItem.indexOf(item) === -1) {
      selectedItem = [...selectedItem, item];
    }

    this.setState({
      inputValue: '',
      selectedItem,
    });

    // const data = {
    //   authors: selectedItem,
    // };

    // this.props.modifyDocument(this.props.selectedDocument._id, data);
  };

  handleDelete = (item) => {
    const selectedItem = [...this.state.selectedItem];
    selectedItem.splice(selectedItem.indexOf(item), 1);

    this.setState({ selectedItem });

    // const data = {
    //   authors: selectedItem,
    // };

    // this.props.modifyDocument(this.props.selectedDocument._id, data);
  };

  render() {
    const { classes, userList } = this.props;
    const { inputValue, selectedItem } = this.state;

    const func = ({
      getInputProps,
      getItemProps,
      isOpen,
      inputValue: inputValue2,
      selectedItem: selectedItem2,
      highlightedIndex,
    }) => (
      <div className={classes.container}>
        <AuthorField
          fullWidth
          classes={classes}
          InputProps={getInputProps({
              startAdornment: filterDataById(userList, selectedItem, '_id')
              .map(user => (
                <Chip
                  key={user.email}
                  tabIndex={-1}
                  label={user.email}
                  className={classes.chip}
                  onDelete={this.handleDelete(user._id)}
                />
              )),
              onChange: this.handleInputChange,
              onKeyDown: this.handleKeyDown,
              placeholder: 'Select authors',
              id: 'integration-downshift-multiple',
            })}
        />
        {isOpen ? (
          <Paper className={classes.paper} square>
            <SuggestionList
              data={{
                inputValue: inputValue2,
                getItemProps,
                highlightedIndex,
                selectedItem: selectedItem2,
              }}
            />
          </Paper>
        ) : null}
      </div>
    );

    return (
      <Downshift
        inputValue={inputValue}
        onChange={this.handleChange}
        selectedItem={selectedItem}
      >
        {func}
      </Downshift>
    );
  }
}

DownshiftMultiple.propTypes = {
  classes: PropTypes.objectOf(PropTypes.any).isRequired,
  userList: PropTypes.arrayOf(PropTypes.object).isRequired,
  selectedDocument: PropTypes.objectOf(PropTypes.any).isRequired,
  // modifyDocument: PropTypes.func.isRequired,
};

export default connect(mapStateToProps, mapDispatchToProps)(DownshiftMultiple);
